---
# TODO: modify machine_image based on deployment_type
- set_fact:
    machine_type: "{{ lookup('env', 'ec2_instance_type') | default('m3.large', true) }}"
    machine_image: "{{ lookup('env', 'ec2_ami') | default(deployment_vars[deployment_type].image, true) }}"
    machine_region: "{{ lookup('env', 'ec2_region') | default(deployment_vars[deployment_type].region, true) }}"
    machine_keypair: "{{ lookup('env', 'ec2_keypair') | default('libra', true) }}"
    created_by: "{{ lookup('env', 'LOGNAME') | default(cluster, true) }}"
    security_group: "{{ lookup('env', 'ec2_security_group') | default('public', true) }}"
    volume_defs:
      master:
        root:
          volume_size: "{{ lookup('env', 'os_master_root_vol_size') | default(25, true) }}"
          device_type: "{{ lookup('env', 'os_master_root_vol_type') | default('gp2', true) }}"
          iops: "{{ lookup('env', 'os_master_root_vol_iops') | default(500, true) }}"
      node:
        root:
          volume_size: "{{ lookup('env', 'os_node_root_vol_size') | default(25, true) }}"
          device_type: "{{ lookup('env', 'os_node_root_vol_type') | default('gp2', true) }}"
          iops: "{{ lookup('env', 'os_node_root_vol_iops') | default(500, true) }}"
        docker:
          volume_size: "{{ lookup('env', 'os_docker_vol_size') | default(32, true) }}"
          device_type: "{{ lookup('env', 'os_docker_vol_type') | default('gp2', true) }}"
          iops: "{{ lookup('env', 'os_docker_vol_iops') | default(500, true) }}"
    docker_vol_ephemeral: "{{ lookup('env', 'os_docker_vol_ephemeral') | default(true, true) }}"
    env: "{{ cluster }}"
    host_type: "{{ type }}"
    env_host_type: "{{ cluster }}-openshift-{{ type }}"

- set_fact:
    volumes: "{{ volume_defs | oo_ec2_volume_definition(host_type, docker_vol_ephemeral | bool) }}"

- name: Launch instance(s)
  ec2:
    state: present
    region: "{{ machine_region }}"
    keypair: "{{ machine_keypair }}"
    group: "{{ security_group }}"
    instance_type: "{{ machine_type }}"
    image: "{{ machine_image }}"
    count: "{{ instances | oo_len }}"
    wait: yes
    instance_tags:
      created-by: "{{ created_by }}"
      env: "{{ env }}"
      host-type: "{{ host_type }}"
      env-host-type: "{{ env_host_type }}"
      deployment-type: "{{ deployment_type }}"
    volumes: "{{ volumes }}"
  register: ec2

- name: Add Name tag to instances
  ec2_tag: resource={{ item.1.id }} region={{ machine_region }} state=present
  with_together:
  - instances
  - ec2.instances
  args:
    tags:
      Name: "{{ item.0 }}"

- set_fact:
    instance_groups: tag_created-by_{{ created_by }}, tag_env_{{ env }}, tag_host-type_{{ host_type }}, tag_env-host-type_{{ env_host_type }}, tag_deployment-type_{{ deployment_type }}

- name: Add new instances groups and variables
  add_host:
    hostname: "{{ item.0 }}"
    ansible_ssh_host: "{{ item.1.dns_name }}"
    ansible_ssh_user: "{{ deployment_vars[deployment_type].ssh_user }}"
    ansible_sudo: "{{ deployment_vars[deployment_type].sudo }}"
    groups: "{{ instance_groups }}"
    ec2_private_ip_address: "{{ item.1.private_ip }}"
    ec2_ip_address: "{{ item.1.public_ip }}"
  with_together:
  - instances
  - ec2.instances

- name: Wait for ssh
  wait_for: "port=22 host={{ item.dns_name }}"
  with_items: ec2.instances

- name: Wait for user setup
  command: "ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no -o ConnectTimeout=10 -o UserKnownHostsFile=/dev/null {{ hostvars[item.0].ansible_ssh_user }}@{{ item.1.dns_name }} echo {{ hostvars[item.0].ansible_ssh_user }} user is setup"
  register: result
  until: result.rc == 0
  retries: 20
  delay: 10
  with_together:
  - instances
  - ec2.instances
