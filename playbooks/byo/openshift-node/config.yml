---
- name: Gather facts for masters hosts
  hosts: masters
  tasks:
  # TODO: create an openshift_master_facts module and move this there
  - set_fact:
      openshift_master_ip: "{{ openshift_ip }}"
      openshift_master_api_url: "{{ openshift_api_url }}"
      openshift_master_webui_url: "{{ openshift_webui_url }}"
      openshift_master_hostname: "{{ openshift_hostname }}"
      openshift_master_public_ip: "{{ openshift_public_ip }}"
      openshift_master_api_public_url: "{{ openshift_api_public_url }}"
      openshift_master_webui_public_url: "{{ openshift_webui_public_url }}"
      openshift_master_public_hostnames: "{{ openshift_public_hostname }}"

- name: Gather and set facts for node hosts
  hosts: nodes
  tasks:
  #TODO: create an openshift_facts module in openshift_common to encapsulate
  #these values
  - command: hostname -f
    register: hostname_result
    when: openshift_hostname is not defined

  - set_fact: openshift_hostname={{ hostname_result.stdout }}
    when: hostname_result is defined

  - set_fact: openshift_public_hostname={{ openshift_hostname }}
    when: openshift_public_hostname is not defined

  - set_fact: openshift_ip={{ ansible_default_ipv4.address }}
    when: openshift_ip is not defined

  - set_fact: openshift_public_ip={{ openshift_ip }}
    when: openshift_public_ip is not defined

  - set_fact:
      # TODO: create an openshift_node_facts module and move this there
      openshift_node_hostname: "{{ openshift_hostname }}"
      openshift_node_name: "{{ openshift_hostname }}"
      openshift_node_cpu: "{{ openshift_node_cpu if openshift_node_cpu else ansible_processor_cores }}"
      openshift_node_memory: "{{ openshift_node_memory if openshift_node_memory else (ansible_memtotal_mb|int * 1024 * 1024 * 0.75)|int }}"
      openshift_node_pod_cidr: "{{ openshift_node_pod_cidr if openshift_node_pod_cidr else None }}"
      openshift_node_hostnames:
      - "{{ openshift_hostname }}"
      - "{{ openshift_public_hostname }}"
      openshift_node_external_ips:
      - "{{ openshift_public_ip }}"
      openshift_node_internal_ips:
      - "{{ openshift_ip }}"
      openshift_node_labels: "{{ openshift_node_labels if openshift_node_labels else {} }}"
      openshift_node_annotations: "{{ openshift_node_annotations if openshift_node_annotations else {} }}"

- name: Register nodes
  hosts: masters[0]
  vars:
    openshift_nodes: "{{ hostvars | oo_select_keys(groups['nodes']) }}"
    openshift_master_urls: "{{ hostvars
          | oo_select_keys(groups['masters'])
          | oo_collect(attribute='openshift_master_api_url') }}"
    openshift_master_public_urls: "{{ hostvars
          | oo_select_keys(groups['masters'])
          | oo_collect(attribute='openshift_master_api_public_url') }}"
  roles:
  - openshift_register_nodes
  tasks:
  - name: Create local temp directory for syncing certs
    local_action: command /usr/bin/mktemp -d /tmp/openshift-ansible-XXXXXXX
    register: mktemp

  - name: Sync master certs to localhost
    synchronize:
      mode: pull
      checksum: yes
      src: /var/lib/openshift/openshift.local.certificates
      dest: "{{ mktemp.stdout }}"

# TODO: sync generated certs between masters

- name: Configure node instances
  hosts: nodes
  vars:
    # TODO: provide a better way to provide defaults for these values
    openshift_master_ips: "{{ hostvars
          | oo_select_keys(groups['masters'])
          | oo_collect(attribute='openshift_master_ip') }}"
    openshift_master_hostnames: "{{ hostvars
          | oo_select_keys(groups['masters'])
          | oo_collect(attribute='openshift_master_hostname') }}"
    openshift_master_public_ips: "{{ hostvars
          | oo_select_keys(groups['masters'])
          | oo_collect(attribute='openshift_master_public_ip') }}"
    openshift_master_public_hostnames: "{{ hostvars
          | oo_select_keys(groups['masters'])
          | oo_collect(attribute='openshift_master_public_hostname') }}"
    cert_parent_rel_path: openshift.local.certificates
    cert_rel_path: "{{ cert_parent_rel_path }}/node-{{ openshift_node_name }}"
    cert_base_path: /var/lib/openshift
    cert_parent_path: "{{ cert_base_path }}/{{ cert_parent_rel_path }}"
    cert_path: "{{ cert_base_path }}/{{ cert_rel_path }}"
  pre_tasks:
  - name: Ensure certificate directories exists
    file:
      path: "{{ item }}"
      state: directory
    with_items:
    - "{{ cert_path }}"
    - "{{ cert_parent_path }}/ca"


  # TODO: only sync to a node if it's certs have been updated
  # TODO: notify restart openshift-node and/or restart openshift-sdn-node,
  # possibly test service started time against certificate/config file
  # timestamps in openshift-node or openshift-sdn-node to trigger notify
  # TODO: also copy ca cert: /var/lib/openshift/openshift.local.certificates/ca/cert.crt
  - name: Sync certs to nodes
    synchronize:
      checksum: yes
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      owner: no
      group: no
    with_items:
    - src: "{{ hostvars[groups['masters'][0]].mktemp.stdout }}/{{ cert_rel_path }}"
      dest: "{{ cert_parent_path }}"
    - src: "{{ hostvars[groups['masters'][0]].mktemp.stdout }}/{{ cert_parent_rel_path }}/ca/cert.crt"
      dest: "{{ cert_parent_path }}/ca/cert.crt"

  # TODO: Delete temp directory
  - local_action: file name={{ hostvars[groups['masters'][0]].mktemp.stdout }} state=absent
    run_once: true

  roles:
  - openshift_node
  - openshift_sdn_node
